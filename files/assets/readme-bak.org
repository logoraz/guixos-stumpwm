#+TITLE: Guix OS (System & Home) + StumpWM Configuration
#+subtitle: (defmacro guix-os (system home &key (stumpwm 'x11)) ...)
#+author: Erik P Almaraz (logoraz)
#+email: erikalmaraz@fastmail.com
:args:
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content indent
#+macro: latest-export-date '(eval (format-time-string "%F %T %z"))'
:end:

My personal GNU Guix OS (System & Home) + StumpWM Configuration!

[[file:./files/assets/guix+stumpwm_desktop.png]]

[[file:./files/assets/guix-os_stumpwm.png]]

This is specifically setup and trailed with my Lenovo ThinkPad X1 Carbon 4th
Gen (Type 20FB) Laptop.

I am currently planing on switching to SwayWM for my Guix OS setup, however,
this it will be a while before I get to this (link below for starter reference):
https://systemcrafters.net/live-streams/september-27-2024/

* My =Guix OS= Configuration

  This setup takes a modular approach and is constructed as a Guile Scheme program
  using modules with the following directory scaffolding:

  - =~/dotfiles/=
    - =config/= Top-level module path for Guix configuration
      - =system= Operating system configuration(s)
      - =services= Custom system-level services
      - =packages= Custom package definitions
      - =home= Custom =home-environment= configration(s)
    - =files/= Other configurations used in my home configuration

  The =files= directory comprises of the following home configurations:
  =StumpWM=, =X11=, =Emacs=, =Nyxt=, and =Lem=.

  I am using a custom home-services module, =home-impure-symlinks=, that directly symlinks
  my =files= directory configs to the necessary places, this way they are mutable.

  While this is considered an 'impure' approach, I personally like my config files to be
  flexible as opposed to immutable. I am constantly experimenting and would rather have
  changes readily available - so I am open to a hybrid (aka "impure") approach when it
  comes to Guix on this front.

** GNU Guix System Distribution Intallation

Basic Instructions on how to install Guix System
*** Live Image/ISO

 I specifically used the guix-installer, but next time my give the
 =guix-live-image= a try... best to have both present for reference.
 Also note that one can use the nonguix images provided on item 3.

 1. [[https://github.com/SystemCrafters/guix-installer/releases/tag/v202308290335][GitHub:SystemCrafters/guix-installer/releases/tag/v202308290335]]

 2. https://github.com/SystemCrafters/guix-live-image

 3. https://gitlab.com/nonguix/nonguix/-/releases
    - https://gitlab.com/nonguix/nonguix

*** Create usb installation media

For a quick reference on how to create usb installation media:

- List information about block devices (i.e. see what disks you have and find
  your usb)

#+begin_src sh

  $ lsblk

#+end_src

- Create your usb installation media (note: =sdX -> sdb= for me)

#+begin_src sh

  $ sudo dd if=guix-installer-<date number>.iso of=/dev/sdX status=progress

#+end_src

*** Graphical Installer Procedure

Followed =SystemCrafters= prescription for installation:

- [[https://systemcrafters.net/craft-your-system-with-guix/full-system-install/][systemcrafters:craft-your-own-system-with-guix]]

** Deploy

*** Initial setup/deployment (WIP)

Setup/deploy by cloning my repo and running the following commands:

#+begin_src sh

  # Get Guix OS Distrobution
  git clone https://github.com/logoraz/guix-craft.git ~/dotfiles

  # Deploy/Install System
  sudo guix system -L ~/dotfiles reconfigure ~/dotfiles/config/system/system-config.scm

  # Deploy/Install Home
  guix home -L ~/dotfiles reconfigure ~/dotfiles/config/home/home-config.scm

#+end_src

** Connecting to Wifi via CLI

Don't have yet a GUI for managing wifi connections in my StumpWM setup, so
typically connect via command line, and so putting here as a reminder to myself:

#+begin_src sh

  # List Wifi networks available
  $ sudo nmcli device wifi list

  # Connect to ESSID
  $ sudo nmcli device wifi connect <ESSID> password <network-password>

#+end_src

List known connections and delete them from list in Network Manager.

#+begin_src sh

  # Get ESSID (name) or UUID of connection to delete
  $ sudo nmcli connection show

  # Delete connection via ID (aka name or ESSID)
  $ sudo nmcli connection delete <ESSID>

#+end_src

** Guile Scheme Stuff

*** ChemScribe
A work in progress of a Common Lisp (Clasp) application I am writing for
my line of chemistry work. Right now it is a base scaffolding and scratch
work as I learn more about Common Lisp...

Reference my repo: [[https://github.com/logoraz/guile-chemscribe]]

** Common Lisp Stuff

Some Common Lisp stuff I've trialed out in Guix System:

*** Clasp

The Clasp Common Lisp compiler is a project of extreme high interest to
me - Clasp is a new Common Lisp implementation that seamlessly
interoperates with C++ libraries and programs using LLVM for compilation
to native code. See: https://github.com/clasp-developers/clasp

They currently have a guix package recipe that hasn't yet made its way
upstream, as it has a bit complex build model due to git submodules:

I have it currently installed to my .guix-profle, but may resort to
installing it via guix shell only, so as to follow the "Guix way..."

Installation Instructions:

#+begin_src sh

  # Clone to a directory of your choice
  $ git clone https://github.com/clasp-developers/clasp.git \
    ~/repos/builds/clasp/

  $ cd ~/repos/builds/clasp/
  $ guix shell --pure git nss-certs sbcl -- ./koga
  # Note: Koga will error out after downloading the dependencies,
  # when trying to configure clasp.
  $ guix build -f guix/clasp.scm


  # Perhaps install via guix shell for the future
  # one caveat is that it will be removed once you perform guix gc
  # I have not yet trialed the below code:
  $ guix shell -D -f guix/clasp.scm
  # then you can invoke it with whatever program you'd like, say emacs:
  $ guix shell -D -f guix/clasp.scm -- emacs

#+end_src


* StumpWM Configuration

My personal StumpWM configuration - I prefer to follow the XDG-style configuration, as
prescribed on https://github.com/stumpwm/stumpwm/wiki/Customize. I like things modular,
so it is set up as such.

** Initialization File:  =~/.config/stumpwm/config=

Loads in modules and set's up core features, such as my X11 environment.

** Modules: =~/.config/stumpwm/modules/*=

These probably aren't qualified to be called modules, but they are akin to stand-alone
common-lisp scripts, they currently have a predefined order to be called in StumpWM
config.lisp -> config.
- =auto-start= - Setup X11 environment & controls
- =colors= - Define color pallet for StumpWM
- =syntax= - Helper Functions, and Macros for StumpWM (wip)
- =frames= - Frame/Window configurations
- =keybindings= - The heart and sole of the StumpWM configuration
- =modeline= - Setup & customize StumpWM modeline
- =theme= - Set appearance/style of StumpWM
- =utilities= - Utility packages/libraries, ad-hoc customizations & commands.

** Libraries: =~/.config/stumpwm/libraries/*=

These are personally developed StumpWM CL packages, to be loaded similarily
to StumpWM-Contrib packages. Note I've modiefied most of these contrib
packages slighly to suit my use needs and updated their package definitions
minimizing `:use` in place of `:import-from` as suggested by the
Common Lisp Cookbook best practices:
- =swm-wpctl= - Improved from stumpwm-wpctl
  - A fork of https://github.com/Junker/stumpwm-wpctl
  - configured/loaded in "utilities.lisp"
- =swm-bluetooth= - Modified from bluetooth found on Phundrak's blog
  - Borrowed from https://config.phundrak.com/stumpwm#bluetooth
  - configured/loaded in "utilities.lisp"
- =swm-screenshot= - Improved from stumpwm-contrib/util/screenshot
  - Enhanced functionality - no longer need to write path & filename
    into a prompt.
  - configured/loaded in "utilities.lisp"
- =end-session= - A la carte from stumpwm-contrib/util, staged for improvements
  - configured/loaded in "utilities.lisp"
- =swm-brightnessctl= - TODO: make a CL interface to brightnessctl for StumpWM
  - configured/loaded in "utilities.lisp"
- =swm-nmctl= - TODO: make a CL interface to nmcli for StumpWM
  - configured/loaded in "utilities.lisp"

** Guix [[https://github.com/stumpwm/stumpwm-contrib][stumpwm-contrib]] modules:
These are the =stumpwm-contrib= modules available in Guix that I am using.
- stumpwm-contrib/util:
  - =kbd-layouts=: configured/loaded in "keybindings.lisp"
  - =ttf-fonts=: configured/loaded in "theme.lisp"
  - =swm-gaps=: configured/loaded in "frames.lisp"
  - =global-windows= - configured/loaded in "config.lisp"
- stumpwm-contrib/modeline:
  - =cpu=: configured/loaded in "modeline.lisp"
  - =mem=: configured/loaded in "modeline.lisp"
  - =wifi=: configured/loaded in "modeline.lisp"
  - =battery-portable=: configured/loaded in "modeline.lisp"


* References


1. Guix System & Home Configuration:

   - [[https://systemcrafters.net/craft-your-system-with-guix/full-system-install/][Craft Your System with Guix - Full System Install]]

   - [[https://github.com/SystemCrafters/guix-installer][SystemCrafters: guix-installer]]

   - https://github.com/iambumblehead/guix-home

   - [[https://systemcrafters.net/craft-your-system-with-guix/how-to-organize-your-config/][Treat your Guix Configration as a program - SystemCrafters]]

   - [[https://github.com/aurtzy/guix-config/blob/master/modules/my-guix/home/services.scm][Home Impure Symlinks Service]]

   - [[https://github.com/SystemCrafters/guix-installer/blob/master/guix/installer.scm][SystemCrafter Guix Installer Image]]

   - [[https://github.com/abcdw/rde][Guix RDE Distrobution Mirror]]

2. StumpWM Configurations & Hacks:

    - https://config.phundrak.com/stumpwm

    - https://github.com/herbertjones/my-stumpwm-config

    - https://mail.gnu.org/archive/html/bug-guix/2023-04/msg00227.html
      - Believe this has since been corrected in Guix upstream.

3. Nyxt Configuration

   - https://nyxt.atlas.engineer/documentation

   - https://www.youtube.com/@nyxt-browser

4. Emacs & Guix

    - https://www.youtube.com/@systemcrafters

5. Xorg Response Lag solution

    - https://gitlab.com/nonguix/nonguix/-/issues/212

